{
  "version": 3,
  "sources": ["../server/shared.js", "../server/queries/userQueries.js", "../server/middleware/authMiddleware.js", "../server/controllers/userControllers.js", "../server/routes/userRoutes.js", "../server/queries/transactionQueries.js", "../server/controllers/transactionControllers.js", "../server/routes/transactionRoutes.js", "../server/queries/leaderboardQueries.js", "../server/controllers/leaderboardControllers.js", "../server/routes/leaderboardRoutes.js", "../server/routes/rouletteRoutes.js", "../server/index.js"],
  "sourcesContent": ["const express = require('express');\nconst app = express();\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst uuid = require('uuid');\nconst pg = require('pg');\nrequire('dotenv').config();\nconst client = new pg.Client({\n    connectionString: process.env.DATABASE_URL || \"postgres://localhost/casino_capstone\",\n    ssl: {\n        rejectUnauthorized: false\n    }\n});\n\nmodule.exports = {\n    express,\n    app,\n    bcrypt,\n    jwt,\n    uuid,\n    client\n};", "const { jwt, bcrypt, client, uuid } = require(\"../shared\");\nconst JWT = process.env.JWT || 'sshhh';\n\nasync function registerQuery(reqBody) {\n    const { username, email, password, mode} = reqBody\n    const hashedPassword = await bcrypt.hash(password, 10);\n    let money;\n    let goal;\n    if (mode === 1) {\n        money = 10000\n        goal = 50000\n    } else if (mode === 2) {\n        money = 5000\n        goal = 50000\n    } else if (mode === 3){\n        money = 1000\n        goal = 50000\n    } else {\n        money = 100\n        goal = 50000\n    }\n    let is_admin = false;\n    if (email === \"bemorrison16@gmail.com\" || email === \"davidtoelle54@gmail.com\" || email === \"josehumberto2002@gmail.com\") {\n        is_admin = true;\n    }\n    const SQL = `\n    INSERT INTO users(id, username, email, password, user_money, goal, is_admin) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *;`;\n    const response = await client.query(SQL, [uuid.v4(), username, email, hashedPassword, money, goal, is_admin]);\n    const token = await jwt.sign({ id: response.rows[0].id }, JWT, { expiresIn: '1h' });\n    return { ...response.rows[0], token };\n}\n\n\nasync function loginQuery(reqBody) {\n    const { username, password } = reqBody;\n    const SQL = `\n    SELECT * FROM users WHERE username=$1;`;\n    const response = await client.query(SQL, [username]);\n    if (!response.rows.length || (await bcrypt.compare(password, response.rows[0].password)) === false) {\n        const error = Error('Invalid username and/or password')\n        error.status = 401;\n        throw error\n    }\n    const token = await jwt.sign({ id: response.rows[0].id }, JWT, { expiresIn: '1h' });\n    return { ...response.rows[0], token };\n}\n\n\nasync function findUserWithToken(token) {\n    let id;\n    try {\n        const payload = await jwt.verify(token, JWT);\n        id = payload.id;\n    } catch (error) {\n        const err = Error('Not authorized');\n        err.status = 401;\n        throw err;\n    }\n    const SQL = `\n    SELECT id, username FROM users WHERE id=$1;`;\n    const response = await client.query(SQL, [id]);\n    if (!response.rows.length) {\n        const err = Error('Not authorized');\n        err.status = 401;\n        throw err;\n    }\n    return response.rows[0];\n}\n\nasync function getUserInfoQuery(id) {\n    const SQL = `\n    SELECT * FROM users WHERE id=$1;`;\n    const response = await client.query(SQL, [id]);\n    if (!response.rows.length) {\n        const err = Error('No user found');\n        err.status = 401;\n        throw err;\n    }\n    return response.rows[0]\n}\n\n\nasync function editUserQuery(reqBody) {\n    const { id, username, email, password, user_money, wins, losses } = reqBody;\n    if (!id) {\n        const err = new Error('User ID is required in body to edit');\n        err.status = 400;\n        throw err;\n    }\n    \n    let hashedPassword = password ? await bcrypt.hash(password, 10) : null;\n    let params = [username ? username : null, email ? email : null, password ? hashedPassword : null, user_money ? user_money : null, wins ? wins : null, losses ? losses : null, id];\n    const SQL = `\n    UPDATE users\n    SET\n    username = COALESCE($1, username),\n    email = COALESCE($2, email),\n    password = COALESCE($3, password),\n    user_money = COALESCE(user_money, 0) + COALESCE($4, 0),\n    wins = COALESCE(wins, 0) + COALESCE($5, 0),\n    losses = COALESCE(losses, 0) + COALESCE($6, 0)\n    WHERE id=$7\n    RETURNING *;`;\n    const response = await client.query(SQL, params);\n    if (!response.rows.length) {\n        const err = new Error('No user found');\n        err.status = 404;\n        throw err;\n    }\n    return response.rows[0];\n}\n\nmodule.exports = {\n    registerQuery, \n    loginQuery,\n    findUserWithToken,\n    getUserInfoQuery,\n    editUserQuery\n}", "const { findUserWithToken } = require('../queries/userQueries');\n\nasync function isLoggedIn(req, res, next) {\n    try {\n        const header = req.headers.authorization;\n        const token = header.split(' ')[1]\n        req.user = await findUserWithToken(token);\n        next();\n    } catch (error) {\n        next(error);\n    }\n}\n\nmodule.exports = {isLoggedIn};", "const {registerQuery, loginQuery, getUserInfoQuery, editUserQuery} = require('../queries/userQueries')\n\nasync function register(req, res, next) {\n    try {\n        const user = await registerQuery(req.body)\n        res.status(201).json(user)\n    } catch (error) {\n        next(error)\n    }\n}\n\n\nasync function login (req, res, next) {\n    try {\n        const user = await loginQuery(req.body)\n        res.status(200).json(user)\n    } catch (error) {\n        next(error)\n    }\n}\n\nasync function getUserInfo(req, res, next) {\n    const id = req.user.id;\n    try {\n        const user = await getUserInfoQuery(id);\n        res.status(200).json(user)\n    } catch (error) {\n        next(error)\n    }\n}\n\nasync function editUser(req, res, next) {\n    try {\n        const updatedUser = await editUserQuery(req.body);\n        res.status(201).json(updatedUser)\n    } catch (error) {\n        next(error)\n    }\n}\n\n\n\nmodule.exports = {\n    register,\n    login,\n    getUserInfo,\n    editUser\n}", "const { express } = require('../shared');\nconst router = express.Router();\nconst { register, login, getUserInfo, editUser } = require('../controllers/userControllers');\nconst { isLoggedIn } = require('../middleware/authMiddleware')\n\n\nrouter.post(\"/register\", register);\nrouter.post(\"/login\", login);\n\nrouter.get(\"/auth\", isLoggedIn, async (req, res, next) => {\n    try {\n        res.send(req.user)\n    } catch (error) {\n        next(error)\n    }\n});\n\nrouter.get(\"/\", isLoggedIn, getUserInfo)\n\nrouter.put(\"/edit\",isLoggedIn, editUser);\n\n\nmodule.exports = router;", "const { client, uuid } = require('../shared')\n\n\nasync function addTransactionQuery(reqBody) {\n    const { id, game, win_loss, money, result } = reqBody;\n    if (!id || !game || win_loss === undefined || !money || !result) {\n        const err = new Error('Missing required fields');\n        err.status = 400;\n        throw err;\n    }\n    const SQL = ` INSERT INTO transactions (transaction_id, user_id, game, win_loss, money, result)\n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;`;\n    const params = [uuid.v4(), id, game, win_loss, money, result];\n    const response = await client.query(SQL, params);\n    if (!response.rows.length) {\n        const err = new Error('Transaction could not be added');\n        err.status = 500;\n        throw err;\n    }\n    return response.rows[0];\n}\n\nasync function getFilteredHistoryQuery(id, win_loss) {\n    const SQL = `\n        SELECT * FROM transactions \n        WHERE user_id=$1 AND win_loss=$2;`;\n    const response = await client.query(SQL, [id, win_loss]);\n    return response;\n}\n\nasync function getAllHistoryQuery(id) {\n    const SQL = `SELECT * FROM transactions WHERE user_id = $1;`;\n    const response = await client.query(SQL, [id]);\n    return response;\n}\n\nasync function getSingleCategoryHistoryQuery(game, id, win_loss = null) {\n    let SQL;\n    let params;\n    if (win_loss !== null) {\n        SQL = `\n            SELECT * FROM transactions \n            WHERE user_id=$1 AND game=$2 AND win_loss=$3;`;\n        params = [id, game, win_loss];\n    } else {\n        SQL = `\n            SELECT * FROM transactions \n            WHERE user_id=$1 AND game=$2;`;\n        params = [id, game];\n    }\n    const response = await client.query(SQL, params);\n    return response;\n}\n\nmodule.exports = {\n    addTransactionQuery,\n    getFilteredHistoryQuery,\n    getAllHistoryQuery,\n    getSingleCategoryHistoryQuery,\n}", "const { getAllHistoryQuery, getSingleCategoryHistoryQuery, addTransactionQuery, getFilteredHistoryQuery } = require(\"../queries/transactionQueries\");\n\nasync function addTransaction(req, res, next) {\n    try {\n        const transaction = await addTransactionQuery(req.body);\n        res.status(201).json(transaction)\n    } catch (error) {\n        next(error)\n    }\n}\n\nasync function getHistory(req, res, next) {\n    try {\n        const { game, win_loss } = req.params;\n        let history;\n        if (game === 'all') {\n            if (win_loss !== undefined) {\n                history = await getFilteredHistoryQuery(req.user.id, win_loss);\n            } else {\n                history = await getAllHistoryQuery(req.user.id);\n            }\n        } else {\n            if (win_loss !== undefined) {\n                history = await getSingleCategoryHistoryQuery(game, req.user.id, win_loss);\n            } else {\n                history = await getSingleCategoryHistoryQuery(game, req.user.id);\n            }\n        }\n        res.status(200).json(history.rows);\n    } catch (error) {\n        next(error)\n    }\n}\n\nmodule.exports = {\n    addTransaction,\n    getHistory\n}", "const { getHistory, addTransaction } = require('../controllers/transactionControllers');\nconst { editUser } = require('../controllers/userControllers');\nconst { express } = require('../shared');\nconst router = express.Router();\n\n\nrouter.post('/add', addTransaction, editUser);\nrouter.get('/history/:game/:win_loss?', getHistory)\n\n\nmodule.exports = router;", "const {client} = require('../shared')\n\n\nasync function getBiggestWinsQuery() {\n    try {\n        const SQL = `\n        SELECT * \n        FROM transactions\n        WHERE win_loss = true\n        ORDER BY money DESC\n        LIMIT 10;`;\n        const leaderboard = await client.query(SQL);\n        return leaderboard.rows;\n    } catch (error) {\n        const err = new Error('Error fetching biggest wins: ' + error.message);\n        err.status = 500;\n        throw err\n    }\n}\n\n\nasync function getBestRecordQuery() {\n    const SQL = `\n    SELECT username, wins, loss,\n           (CASE WHEN wins + loss > 0 THEN \n               ROUND((wins * 100.0 / (wins + loss)), 2)\n            ELSE 0\n            END) AS win_percentage\n    FROM users\n    ORDER BY wins DESC\n    LIMIT 5;`;\ntry {\n    const leaderboard = await client.query(SQL);\n    return leaderboard.rows;\n} catch (error) {\n    const err = new Error('Error fetching best records: ' + error.message);\n    err.status = 500;\n    throw err\n}\n}\n\n\nasync function getMostMoneyQuery() {\n    try {\n        const SQL = `\n        SELECT username, user_money\n        FROM users WHERE is_admin = false\n        ORDER BY user_money DESC\n        LIMIT 5;`;\n        const leaderboard = await client.query(SQL);\n        return leaderboard.rows;\n    } catch (error) {\n        const err = new Error('Error fetching most money leaders: ' + error.message);\n        err.status = 500;\n        throw err\n    }\n}\n\n\nmodule.exports = {\n    getBiggestWinsQuery, \n    getBestRecordQuery,\n    getMostMoneyQuery\n}", "const { getBiggestWinsQuery, getBestRecordQuery, getMostMoneyQuery } = require(\"../queries/leaderboardQueries\");\n\n\nasync function getBiggestWins(req, res, next) {\n    try {\n        const leaderboard = await getBiggestWinsQuery()\n        res.status(200).json(leaderboard)\n    } catch (error) {\n        next(error)\n    }\n}\n\nasync function getUserLeaderboards(req, res, next) {\n    try {\n        const { record } = req.params;\n    if (record === 'record') {\n        const leaderboard = await getBestRecordQuery();\n        res.status(200).json(leaderboard)\n    } else {\n        const leaderboard = await getMostMoneyQuery();\n        res.status(200).json(leaderboard)\n    }\n    } catch (error) {\n        next(error)\n    }\n}\n\nmodule.exports = {\n    getBiggestWins,\n    getUserLeaderboards\n}", "const { getBiggestWins, getUserLeaderboards } = require('../controllers/leaderboardControllers');\nconst { express } = require('../shared');\nconst router = express.Router();\n\n// //send for which game in the body\nrouter.get('/transaction', getBiggestWins);\n\n// //specify whether amount of money or win loss ratio in body\nrouter.get('/user/:record?', getUserLeaderboards)\n\n\nmodule.exports = router;", "const { express } = require('../shared');\nconst router = express.Router();\n\nrouter.get('/number', async (req, res) => {\n    const min = 0;\n    const max = 36;\n    const number = Math.floor(Math.random() * (max - min + 1)) + min;\n    res.status(200).json(number)\n});\n\nmodule.exports = router", "const { app, express, client } = require('./shared');\nconst { isLoggedIn } = require('./middleware/authMiddleware')\nconst cors = require('cors');\n\n\napp.use(express.json());\napp.use(cors());\n\nconst userRoutes = require('./routes/userRoutes');\nconst transactionRoutes = require('./routes/transactionRoutes');\nconst leaderboardRoutes = require('./routes/leaderboardRoutes');\nconst rouletteRoutes = require('./routes/rouletteRoutes')\n\n\napp.use(\"/user\", userRoutes);\napp.use(\"/transaction\", isLoggedIn, transactionRoutes);\napp.use(\"/leaderboard\", leaderboardRoutes);\napp.use(\"/roulette\", rouletteRoutes);\n\napp.use((err, req, res, next)=> {\n    console.log(err);\n    res.status(err.status || 500).send({ error: err.message ? err.message : err });\n});\n  \nasync function init() {\n    const PORT = process.env.PORT || 8080;\n    await client.connect();\n    console.log(\"connected to DB\")\n    app.listen(PORT, () => {\n        console.log(`Listening on Port ${PORT}...`)\n    });\n}\ninit();"],
  "mappings": "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",
  "names": ["require_shared", "__commonJSMin", "exports", "module", "express", "app", "bcrypt", "jwt", "uuid", "pg", "client", "require_userQueries", "__commonJSMin", "exports", "module", "jwt", "bcrypt", "client", "uuid", "JWT", "registerQuery", "reqBody", "username", "email", "password", "mode", "hashedPassword", "money", "goal", "is_admin", "response", "token", "loginQuery", "error", "findUserWithToken", "id", "err", "getUserInfoQuery", "editUserQuery", "user_money", "wins", "losses", "params", "require_authMiddleware", "__commonJSMin", "exports", "module", "findUserWithToken", "isLoggedIn", "req", "res", "next", "token", "error", "require_userControllers", "__commonJSMin", "exports", "module", "registerQuery", "loginQuery", "getUserInfoQuery", "editUserQuery", "register", "req", "res", "next", "user", "error", "login", "getUserInfo", "id", "editUser", "updatedUser", "require_userRoutes", "__commonJSMin", "exports", "module", "express", "router", "register", "login", "getUserInfo", "editUser", "isLoggedIn", "req", "res", "next", "error", "require_transactionQueries", "__commonJSMin", "exports", "module", "client", "uuid", "addTransactionQuery", "reqBody", "id", "game", "win_loss", "money", "result", "err", "SQL", "params", "response", "getFilteredHistoryQuery", "getAllHistoryQuery", "getSingleCategoryHistoryQuery", "require_transactionControllers", "__commonJSMin", "exports", "module", "getAllHistoryQuery", "getSingleCategoryHistoryQuery", "addTransactionQuery", "getFilteredHistoryQuery", "addTransaction", "req", "res", "next", "transaction", "error", "getHistory", "game", "win_loss", "history", "require_transactionRoutes", "__commonJSMin", "exports", "module", "getHistory", "addTransaction", "editUser", "express", "router", "require_leaderboardQueries", "__commonJSMin", "exports", "module", "client", "getBiggestWinsQuery", "error", "err", "getBestRecordQuery", "SQL", "getMostMoneyQuery", "require_leaderboardControllers", "__commonJSMin", "exports", "module", "getBiggestWinsQuery", "getBestRecordQuery", "getMostMoneyQuery", "getBiggestWins", "req", "res", "next", "leaderboard", "error", "getUserLeaderboards", "record", "require_leaderboardRoutes", "__commonJSMin", "exports", "module", "getBiggestWins", "getUserLeaderboards", "express", "router", "require_rouletteRoutes", "__commonJSMin", "exports", "module", "express", "router", "req", "res", "number", "app", "express", "client", "isLoggedIn", "cors", "userRoutes", "transactionRoutes", "leaderboardRoutes", "rouletteRoutes", "err", "req", "res", "next", "init", "PORT"]
}
